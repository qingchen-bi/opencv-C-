直方图表示一个图像（有时是一组图像） 中具有某个值的像素的数量。 因此灰度图像的直方图有256个项目， 也叫箱子（bin） 
0号箱子提供值为0的像素的数量， 1号箱子提供值为1的像素的数量。

cv::Mat类定义了适用于一维、 二维和三维矩阵的at方法。注意， 直方图中的值被存储为float值。

查找表是个一对一（或多对一） 的函数， 定义了如何把像素值转换
成新的值。 它是一个一维数组， 对于规则的灰度图像， 它包含256个
项目.

对于需要更换全部像素强度值的程序， 都可以使用查找表。 但是这个
转换过程必须是针对整幅图像的。 也就是说， 一个强度值对应的全部
像素都必须使用同一种转换方法

很多时候， 图像的视觉缺陷并不是它使用的强度值范围太
窄， 而是由于部分强度值的使用频率比其他强度值要高得多。 4.1节
显示的直方图就是此类现象的一个很好的例子。 中等灰度的强度值非
常多， 而较暗和较亮的像素值则非常稀少。
通常认为， 对所有可用像素强度值都均衡使用， 才是一副高质量的图像。
这正是直方图均衡化这一概念背后的思想， 也就是让图像的直方图尽可能地平稳

利用直方图找特定图像元素：
直方图是图像内容的一个重要特性。 如果图像的某个区域含有特定的
纹理或物体， 这个区域的直方图就可以看作一个函数， 该函数返回某
个像素属于这个特殊纹理或物体的概率。这个概率函数是从一个简单的灰度
直方图提取的， 理解这点很重要。 其他很多像素的强度值与云彩像素的强度值是相同的，
在对直方图进行反向投影时会用相同的概率值替换具有相同强度值的像素。

4.6 均值平移算法查找目标
直方图反向投影的结果是一个概率分布图，表示一个指定图像片段出
现在特定位置的概率。 假设我们已经知道图像中某个物体的大致位
置， 就可以用概率分布图找到物体的准确位置。 最可能出现的位置就
是窗口中概率最大的位置。 因此我们可以从一个初始位置开始， 在周
围反复移动， 就可能找到物体所在的准确位置。 这个实现方法称为均
值平移算法。
在使用颜色的色调分量时， 要把它的饱和度考虑在内（饱和度是矩向
量的第二个入口） ， 这一点通常很重要。 如果颜色的饱和度很低， 它
的色调信息就会变得不稳定且不可靠
  实现原理
利用的一个图片定义ROI，并且得到直方图，再在第二个图片中，通过直方图找到目标区域
均值偏移算法是一个迭代过程， 用于定位概率函数的局部最大值。 定
位的方法是寻找预定义窗口内部数据点的重心或加权平均值。 然后把
窗口移动到重心的位置， 并重复该过程， 直到窗口中心收敛到一个稳
定的点。 OpenCV实现该算法时定义了两个停止条件： 迭代次数达到最
大值； 窗口中心的偏移值小于某个限值， 可认为该位置收敛到一个
稳定点。

4.7比较直方图搜索相似图像
OpenCV
在cv::compareHist函数的实现过程中使用了其中的一些方法。
为了将一个基准图像与一批图像进行对比并找出其中与它最相似的图
像， 我们创建了类ImageComparator。 这个类引用了一个基准图像
和一个输入图像（连同它们的直方图） 。 另外， 因为我们要用颜色直
方图来进行比较， 因此用到了ColorHistogram类
  实现原理
大多数直方图比较方法都是基于逐个箱子进行比较。 正因为如此， 在
测量两个颜色直方图的相似度时减少直方图箱子数量显得十分重要。
对cv::compareHist的调用非常简单。 只需要输入两个直方图， 函
数就返回它们的差距。 你可以通过一个标志参数指定想要使用的测量
方法。 ImageComparator类使用了交叉点方法（带
有CV_COMP_INTERSECT标志） 。 该方法只是逐个箱子地比较每个
直方图中的数值， 并保存最小的值。 然后把这些最小值累加， 作为相
似度测量值。 因此， 两个没有相同颜色的直方图得到交叉值为0， 而
两个完全相同的直方图得到的值就等于像素总数。

积分图像
前面几节讲了直方图的计算方法， 即遍历图像的全部像素并累计每个
强度值在图像中出现的次数。实际上累计图像的某个子区域内的像素总数，
是很多计算机视觉算法中常见的过程。 现在假设需要对图像中的多个
兴趣区域计算几个此类直方图。 这些计算过程都马上会变得非常耗
时。 这种情况下， 有一个工具可以极大地提高统计图像子区域像素的
效率： 积分图像。
cv::sum函数只是遍历区域内的所有像素， 并计算累加和。 使用积
分图像后， 只需要三次加法运算即可实现该功能。 不过首先需要计算
积分图像，
计算积分图像需要遍历全部像素，
因此速度比较慢。 关键是一旦这个初始计算完成， 只需要添加四个像
素就能得到兴趣区域的累加和， 与区域的尺寸无关。 因此， 如果需
要在多个尺寸的区域上计算像素累加和， 就最好采用积分图像。

积分图像定义***************************************
 取图像左上侧的全部像素计算累加和， 并用这个累加和替换图像中的每一个像
素， 用这种方式得到的图像称为积分图像。 计算积分图像时只需对图
像扫描一次。 这是因为当前像素的积分值等于上一像素的积分值加上
当前行的累计值。 因此积分图像就是一个包含像素累加和的新图像。























